import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ContactService } from '../../services/contact.service';
import { ContactForm } from '../../models/contact.model';

@Component({
  selector: 'app-contact',
  standalone: true,
  imports: [ReactiveFormsModule, CommonModule],
  templateUrl: './contact.component.html',
  styleUrl: './contact.component.css'
})
export class ContactComponent implements OnInit {
  contactForm!: FormGroup;
  isSubmitting = false;
  submitMessage = '';
  submitSuccess = false;
  
  // Popular country codes for better UX
  countryCodes = [
    { code: '+91', country: 'India', flag: 'ðŸ‡®ðŸ‡³' },
    { code: '+1', country: 'United States', flag: 'ðŸ‡ºðŸ‡¸' },
    { code: '+44', country: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§' },
    { code: '+61', country: 'Australia', flag: 'ðŸ‡¦ðŸ‡º' },
    { code: '+1', country: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦' },
    { code: '+49', country: 'Germany', flag: 'ðŸ‡©ðŸ‡ª' },
    { code: '+33', country: 'France', flag: 'ðŸ‡«ðŸ‡·' },
    { code: '+81', country: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ' },
    { code: '+86', country: 'China', flag: 'ðŸ‡¨ðŸ‡³' },
    { code: '+82', country: 'South Korea', flag: 'ðŸ‡°ðŸ‡·' },
    { code: '+65', country: 'Singapore', flag: 'ðŸ‡¸ðŸ‡¬' },
    { code: '+971', country: 'UAE', flag: 'ðŸ‡¦ðŸ‡ª' },
    { code: '+966', country: 'Saudi Arabia', flag: 'ðŸ‡¸ðŸ‡¦' },
    { code: '+55', country: 'Brazil', flag: 'ðŸ‡§ðŸ‡·' },
    { code: '+52', country: 'Mexico', flag: 'ðŸ‡²ðŸ‡½' },
    { code: '+7', country: 'Russia', flag: 'ðŸ‡·ðŸ‡º' },
    { code: '+90', country: 'Turkey', flag: 'ðŸ‡¹ðŸ‡·' },
    { code: '+27', country: 'South Africa', flag: 'ðŸ‡¿ðŸ‡¦' },
    { code: '+234', country: 'Nigeria', flag: 'ðŸ‡³ðŸ‡¬' },
    { code: '+39', country: 'Italy', flag: 'ðŸ‡®ðŸ‡¹' },
    { code: '+34', country: 'Spain', flag: 'ðŸ‡ªðŸ‡¸' },
    { code: '+31', country: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±' },
    { code: '+46', country: 'Sweden', flag: 'ðŸ‡¸ðŸ‡ª' },
    { code: '+47', country: 'Norway', flag: 'ðŸ‡³ðŸ‡´' },
    { code: '+45', country: 'Denmark', flag: 'ðŸ‡©ðŸ‡°' },
    { code: '+41', country: 'Switzerland', flag: 'ðŸ‡¨ðŸ‡­' },
    { code: '+43', country: 'Austria', flag: 'ðŸ‡¦ðŸ‡¹' },
    { code: '+32', country: 'Belgium', flag: 'ðŸ‡§ðŸ‡ª' },
    { code: '+351', country: 'Portugal', flag: 'ðŸ‡µðŸ‡¹' },
    { code: '+353', country: 'Ireland', flag: 'ðŸ‡®ðŸ‡ª' },
    { code: '+48', country: 'Poland', flag: 'ðŸ‡µðŸ‡±' },
    { code: '+420', country: 'Czech Republic', flag: 'ðŸ‡¨ðŸ‡¿' },
    { code: '+36', country: 'Hungary', flag: 'ðŸ‡­ðŸ‡º' },
    { code: '+30', country: 'Greece', flag: 'ðŸ‡¬ðŸ‡·' },
    { code: '+358', country: 'Finland', flag: 'ðŸ‡«ðŸ‡®' },
    { code: '+380', country: 'Ukraine', flag: 'ðŸ‡ºðŸ‡¦' },
    { code: '+7', country: 'Kazakhstan', flag: 'ðŸ‡°ðŸ‡¿' },
    { code: '+62', country: 'Indonesia', flag: 'ðŸ‡®ðŸ‡©' },
    { code: '+60', country: 'Malaysia', flag: 'ðŸ‡²ðŸ‡¾' },
    { code: '+66', country: 'Thailand', flag: 'ðŸ‡¹ðŸ‡­' },
    { code: '+63', country: 'Philippines', flag: 'ðŸ‡µðŸ‡­' },
    { code: '+84', country: 'Vietnam', flag: 'ðŸ‡»ðŸ‡³' },
    { code: '+880', country: 'Bangladesh', flag: 'ðŸ‡§ðŸ‡©' },
    { code: '+92', country: 'Pakistan', flag: 'ðŸ‡µðŸ‡°' },
    { code: '+94', country: 'Sri Lanka', flag: 'ðŸ‡±ðŸ‡°' },
    { code: '+977', country: 'Nepal', flag: 'ðŸ‡³ðŸ‡µ' },
    { code: '+852', country: 'Hong Kong', flag: 'ðŸ‡­ðŸ‡°' },
    { code: '+886', country: 'Taiwan', flag: 'ðŸ‡¹ðŸ‡¼' },
    { code: '+64', country: 'New Zealand', flag: 'ðŸ‡³ðŸ‡¿' },
    { code: '+20', country: 'Egypt', flag: 'ðŸ‡ªðŸ‡¬' },
    { code: '+972', country: 'Israel', flag: 'ðŸ‡®ðŸ‡±' },
    { code: '+98', country: 'Iran', flag: 'ðŸ‡®ðŸ‡·' },
    { code: '+964', country: 'Iraq', flag: 'ðŸ‡®ðŸ‡¶' },
    { code: '+962', country: 'Jordan', flag: 'ðŸ‡¯ðŸ‡´' },
    { code: '+961', country: 'Lebanon', flag: 'ðŸ‡±ðŸ‡§' },
    { code: '+965', country: 'Kuwait', flag: 'ðŸ‡°ðŸ‡¼' },
    { code: '+968', country: 'Oman', flag: 'ðŸ‡´ðŸ‡²' },
    { code: '+974', country: 'Qatar', flag: 'ðŸ‡¶ðŸ‡¦' },
    { code: '+973', country: 'Bahrain', flag: 'ðŸ‡§ðŸ‡­' },
    { code: '+54', country: 'Argentina', flag: 'ðŸ‡¦ðŸ‡·' },
    { code: '+56', country: 'Chile', flag: 'ðŸ‡¨ðŸ‡±' },
    { code: '+57', country: 'Colombia', flag: 'ðŸ‡¨ðŸ‡´' },
    { code: '+51', country: 'Peru', flag: 'ðŸ‡µðŸ‡ª' },
    { code: '+593', country: 'Ecuador', flag: 'ðŸ‡ªðŸ‡¨' },
    { code: '+598', country: 'Uruguay', flag: 'ðŸ‡ºðŸ‡¾' },
    { code: '+595', country: 'Paraguay', flag: 'ðŸ‡µðŸ‡¾' },
    { code: '+591', country: 'Bolivia', flag: 'ðŸ‡§ðŸ‡´' },
    { code: '+58', country: 'Venezuela', flag: 'ðŸ‡»ðŸ‡ª' },
    { code: '+254', country: 'Kenya', flag: 'ðŸ‡°ðŸ‡ª' },
    { code: '+233', country: 'Ghana', flag: 'ðŸ‡¬ðŸ‡­' },
    { code: '+255', country: 'Tanzania', flag: 'ðŸ‡¹ðŸ‡¿' },
    { code: '+256', country: 'Uganda', flag: 'ðŸ‡ºðŸ‡¬' },
    { code: '+251', country: 'Ethiopia', flag: 'ðŸ‡ªðŸ‡¹' },
    { code: '+212', country: 'Morocco', flag: 'ðŸ‡²ðŸ‡¦' },
    { code: '+213', country: 'Algeria', flag: 'ðŸ‡©ðŸ‡¿' },
    { code: '+216', country: 'Tunisia', flag: 'ðŸ‡¹ðŸ‡³' }
  ];

  constructor(
    private fb: FormBuilder,
    private contactService: ContactService
  ) {}

  ngOnInit() {
    this.initializeForm();
  }

  initializeForm() {
    this.contactForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(2)]],
      email: ['', [Validators.required, Validators.email]],
      countryCode: ['+91'],
      phone: [''],
      company: [''],
      message: ['', [Validators.required, Validators.minLength(10)]]
    });
  }

  get f() {
    return this.contactForm.controls;
  }

  onSubmit() {
    if (this.contactForm.valid) {
      this.isSubmitting = true;
      this.submitMessage = '';

      const formData: ContactForm = this.contactForm.value;

      // Use EmailJS (recommended) - change to submitToNetlify() for Netlify Forms
      this.contactService.submitContactForm(formData).subscribe({
        next: (response) => {
          this.isSubmitting = false;
          this.submitSuccess = response.success;
          this.submitMessage = response.message;
          
          if (response.success) {
            this.contactForm.reset();
            // Reset country code to default after form reset
            this.contactForm.patchValue({ countryCode: '+91' });
          }
        },
        error: (error) => {
          this.isSubmitting = false;
          this.submitSuccess = false;
          this.submitMessage = 'An error occurred. Please try again later.';
          console.error('Contact form error:', error);
        }
      });
    } else {
      this.markFormGroupTouched();
    }
  }

  private markFormGroupTouched() {
    Object.keys(this.contactForm.controls).forEach(key => {
      const control = this.contactForm.get(key);
      control?.markAsTouched();
    });
  }

  getFieldError(fieldName: string): string {
    const field = this.contactForm.get(fieldName);
    if (field?.errors && field.touched) {
      if (field.errors['required']) {
        return `${this.getFieldDisplayName(fieldName)} is required.`;
      }
      if (field.errors['email']) {
        return 'Please enter a valid email address.';
      }
      if (field.errors['minlength']) {
        const requiredLength = field.errors['minlength'].requiredLength;
        return `${this.getFieldDisplayName(fieldName)} must be at least ${requiredLength} characters.`;
      }
    }
    return '';
  }

  private getFieldDisplayName(fieldName: string): string {
    const displayNames: { [key: string]: string } = {
      name: 'Name',
      email: 'Email',
      phone: 'Phone',
      company: 'Company',
      message: 'Message'
    };
    return displayNames[fieldName] || fieldName;
  }

  isFieldInvalid(fieldName: string): boolean {
    const field = this.contactForm.get(fieldName);
    return !!(field?.invalid && field?.touched);
  }
}
